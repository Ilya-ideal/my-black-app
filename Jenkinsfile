pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'ilia2014a/my-black-app'
        KUBE_NAMESPACE = 'my-black-app'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                bat 'echo "‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω"'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    env.DEPLOY_TIME = new Date().format("yyyy-MM-dd-HH-mm-ss")
                    
                    bat """
                        echo "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
                        docker build --build-arg DEPLOY_TIME=${env.DEPLOY_TIME} -t ${env.DOCKER_IMAGE}:latest .
                    """
                    echo "‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω"
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'dockerhub-credentials',
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )]) {
                        bat """
                            echo "–õ–æ–≥–∏–Ω –≤ Docker Hub..."
                            echo %DOCKER_PASSWORD% | docker login -u %DOCKER_USERNAME% --password-stdin
                            docker push ${env.DOCKER_IMAGE}:latest
                        """
                    }
                    echo "‚úÖ –û–±—Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Docker Hub"
                }
            }
        }

        stage('Deploy to Minikube') {
            steps {
                script {
                    withCredentials([file(
                        credentialsId: 'kubeconfig',
                        variable: 'KUBECONFIG_FILE'
                    )]) {
                        bat """
                            echo "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ Minikube..."
                            
                            # –°–æ–∑–¥–∞–µ–º namespace
                            kubectl create namespace ${env.KUBE_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                            
                            # –°–æ–∑–¥–∞–µ–º ConfigMap
                            kubectl create configmap app-config ^
                                --from-literal=app.version=1.0.0 ^
                                --from-literal=deploy.time=${env.DEPLOY_TIME} ^
                                -n ${env.KUBE_NAMESPACE} ^
                                -o yaml --dry-run=client | kubectl apply -f -
                            
                            # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                            kubectl apply -f k8s/ -n ${env.KUBE_NAMESPACE}
                            
                            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
                            echo "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø–æ–¥–∞..."
                            timeout /t 30
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                            kubectl get pods -n ${env.KUBE_NAMESPACE}
                            kubectl get services -n ${env.KUBE_NAMESPACE}
                            
                            echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –≤ Minikube"
                        """
                    }
                }
            }
        }

        stage('Test Application') {
            steps {
                script {
                    withCredentials([file(
                        credentialsId: 'kubeconfig',
                        variable: 'KUBECONFIG_FILE'
                    )]) {
                        bat """
                            echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
                            
                            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–¥–∞
                            for /f "tokens=1" %%i in ('kubectl get pods -n ${env.KUBE_NAMESPACE} -o name') do set POD_NAME=%%i
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
                            kubectl logs %POD_NAME% -n ${env.KUBE_NAMESPACE}
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
                            kubectl exec %POD_NAME% -n ${env.KUBE_NAMESPACE} -- curl -s http://localhost:5000/health || echo "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è"
                            
                            echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
                        """
                    }
                }
            }
        }

        stage('Send Telegram Notification') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'telegram-bot-token', variable: 'TELEGRAM_BOT_TOKEN'),
                        string(credentialsId: 'telegram-chat-id', variable: 'TELEGRAM_CHAT_ID')
                    ]) {
                        bat """
                            curl -s -X POST ^
                            "https://api.telegram.org/bot%TELEGRAM_BOT_TOKEN%/sendMessage" ^
                            -d chat_id=%TELEGRAM_CHAT_ID% ^
                            -d text="üéâ CI/CD –ø–∞–π–ø–ª–∞–π–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —á–µ—Ä–Ω—ã–º —Ñ–æ–Ω–æ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –≤ Minikube. Docker –æ–±—Ä–∞–∑: ${env.DOCKER_IMAGE}:latest –í—Ä–µ–º—è: ${env.DEPLOY_TIME}"
                        """
                    }
                }
            }
        }
    }

    post {
        failure {
            script {
                withCredentials([
                    string(credentialsId: 'telegram-bot-token', variable: 'TELEGRAM_BOT_TOKEN'),
                    string(credentialsId: 'telegram-chat-id', variable: 'TELEGRAM_CHAT_ID')
                ]) {
                    bat """
                        curl -s -X POST ^
                        "https://api.telegram.org/bot%TELEGRAM_BOT_TOKEN%/sendMessage" ^
                        -d chat_id=%TELEGRAM_CHAT_ID% ^
                        -d text="‚ùå –î–µ–ø–ª–æ–π –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Jenkins: ${env.BUILD_URL}"
                    """
                }
            }
        }
    }
}