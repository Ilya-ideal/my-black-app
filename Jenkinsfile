pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'ilia2014a/my-black-app'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                bat 'echo "‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω"'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    env.DEPLOY_TIME = new Date().format("yyyy-MM-dd-HH-mm-ss")
                    
                    bat """
                        echo –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...
                        docker build --build-arg DEPLOY_TIME=${env.DEPLOY_TIME} -t ${env.DOCKER_IMAGE}:latest .
                    """
                    echo "‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω"
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'dockerhub-credentials',
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )]) {
                        bat """
                            echo –õ–æ–≥–∏–Ω –≤ Docker Hub...
                            echo %DOCKER_PASSWORD% | docker login -u %DOCKER_USERNAME% --password-stdin
                            echo –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–∑–∞ –≤ Docker Hub...
                            docker push ${env.DOCKER_IMAGE}:latest
                        """
                    }
                    echo "‚úÖ –û–±—Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Docker Hub"
                }
            }
        }

        stage('Local Deploy and Test') {
            steps {
                bat """
                    echo –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...
                    docker run -d -p 5000:5000 --name my-black-app-test ${env.DOCKER_IMAGE}:latest
                    timeout /t 10
                    echo –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...
                    curl http://localhost:5000/health || echo –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!
                    echo –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...
                    docker stop my-black-app-test
                    docker rm my-black-app-test
                """
            }
        }

        stage('Send Success Notification') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'telegram-bot-token', variable: 'TELEGRAM_BOT_TOKEN'),
                        string(credentialsId: 'telegram-chat-id', variable: 'TELEGRAM_CHAT_ID')
                    ]) {
                        // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
                        bat """
                            curl -s -X POST ^
                            "https://api.telegram.org/bot%TELEGRAM_BOT_TOKEN%/sendMessage" ^
                            -d chat_id=%TELEGRAM_CHAT_ID% ^
                            -d text="üéâ SUCCESS: CI/CD Pipeline Completed! Docker image: ${env.DOCKER_IMAGE}:latest Time: ${env.DEPLOY_TIME} Status: All stages passed successfully!"
                        """
                    }
                }
            }
        }
    }

    post {
        failure {
            script {
                withCredentials([
                    string(credentialsId: 'telegram-bot-token', variable: 'TELEGRAM_BOT_TOKEN'),
                    string(credentialsId: 'telegram-chat-id', variable: 'TELEGRAM_CHAT_ID')
                ]) {
                    bat """
                        curl -s -X POST ^
                        "https://api.telegram.org/bot%TELEGRAM_BOT_TOKEN%/sendMessage" ^
                        -d chat_id=%TELEGRAM_CHAT_ID% ^
                        -d text="‚ùå FAILED: CI/CD Pipeline failed. Check Jenkins: ${env.BUILD_URL}"
                    """
                }
            }
        }
        
        success {
            bat """
                echo "=== CI/CD PIPELINE SUMMARY ==="
                echo "‚úÖ Source code from GitHub"
                echo "‚úÖ Docker image built"
                echo "‚úÖ Image pushed to Docker Hub" 
                echo "‚úÖ Local deployment tested"
                echo "‚úÖ Telegram notifications sent"
                echo "üéâ ALL STAGES COMPLETED SUCCESSFULLY!"
            """
        }
    }
}